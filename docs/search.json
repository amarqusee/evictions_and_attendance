[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello everyone\n\n\nOn this about page, you might want to add more information about yourself, the project, or course.\n\n\nMy name is Eric Delmelle, the instructor for the course.\nYou can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2024.\nWrite something about you\n\nor about something you like",
    "crumbs": [
      "About Me"
    ]
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploring Evictions and Attendance in Philadelphia Schools",
    "section": "",
    "text": "Can information about evictions help predict school attendance? This was the question I sought to begin exploring, using data on evictions and attendance rates in Philadelphia elementary schools.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550: Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#context-of-evictions-in-philadelphia",
    "href": "index.html#context-of-evictions-in-philadelphia",
    "title": "Exploring Evictions and Attendance in Philadelphia Schools",
    "section": "Context of Evictions in Philadelphia",
    "text": "Context of Evictions in Philadelphia\nPhiladelphia’s eviction rate is much higher than other parts of Pennsylvania, with 3.48% of renters facing eviction each year. Recent efforts to create a “right to counsel” guaranteeing legal representation for some tenants facing eviction may stem the problem, but gentrification combined with high poverty rates have generally kept eviction high, with Black renters especially likely to face eviction. Families with children are in general at a higher risk of facing eviction.\nFacing eviction from a home can destabilize many aspects of a family’s life, jeopardizing their ability to maintain employment, address health concerns, and pursue education. I wanted to see whether elementary school catchments with higher numbers of evictions saw lower attendance rates at school.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#data-acquisition",
    "href": "index.html#data-acquisition",
    "title": "Exploring Evictions and Attendance in Philadelphia Schools",
    "section": "Data Acquisition",
    "text": "Data Acquisition\nFrom Jonathan Pyle of Philadelphia Legal Assistance, I obtained csv data of all eviction cases in Philadelphia’s Landlord-Tenant Court from 2016 onwards. The data included the address of the premises (helpfully already geocoded). I also obtained shapefiles from OpenDataPhilly showing the catchments of schools in the district, and attendance data from the School District of Philadelphia. An unfortunate fact is that while the District makes attendance data for the entire city available on a monthly basis, school-specific attendance data is only available aggregated yearly. In the future, it would be interesting to conduct an analysis like this on a monthly basis which might more clearly show relationships between eviction and attendance, but due to this data constraint, I analyzed the relationship on a yearly basis. I did not normalize by population because elementary school catchments are already created (boundaries drawn by the District) so as to ensure comparable numbers of students in each school, meaning that the total population of the catchments should also be similar. Measuring attendance as a rate rather than a number similarly dilutes the impact of different sizes of schools.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#data-processing",
    "href": "index.html#data-processing",
    "title": "Exploring Evictions and Attendance in Philadelphia Schools",
    "section": "Data Processing",
    "text": "Data Processing\nI conducted a spatial join between geocoded evictions and elementary school catchments to add to each eviction record information about which elementary school catchment the home was located in.\nI cleaned up the attendance data by limiting it to only data about all students (as opposed to broken down by race or gender) and by assigning it a year: the end year of the school year, since the spring portion of the school year is generally longer than the fall (so, attendance for the 2013-2014 academic year was categorized as 2014). This was to allow me to match the years between the attendance records and evictions record.\nI then had to manipulate the school names to make them match between the shapefiles of the catchments and the attendance data. The shapefiles listed schools named after people in the format “Last Name, First Name” (ex ‘Locke, Alain’), while the attendance data used the format “First Name Last Name School” (ex ‘Alain Locke School’).\nevictions_in_catchments['school_name'] = evictions_in_catchments['ES_NAME'].apply(     lambda x: ' '.join(x.split(', ')[::-1]).strip() + ' School' if isinstance(x, str) and ',' in str(x) else x )\nI used this code to take the portion after the space, put it in the front, remove the comma, and add ‘School.’ Even so, there were discrepancies preventing me from matching the schools precisely–for example, a school might be listed as “Anthony M Marqusee School” in one place and “Anthony Marqusee School” in another. I used fuzzywuzzy to implement fuzzy matching and was then able to accurately pair the names of all the elementary schools in the data sets. I then used pd.merge to merge attendance data by both school and year.\nThe attendance data I used was “percent with 95%+ attendance,” as raw attendance rates were not available. This number reflected the percent of students enrolled at the school who attended school at least 95% of the time. I also added a ‘previous year’s attendance’ column showing attendance at that school in the prior school year.\nI then merged the attendance data with the evictions, merging on school name and year. At this point, I had a dataframe of all the evictions, with each eviction instance also having the school and its attendance data for that year.\nNext, I used groupby and count to get the number of evictions in each school catchment for each year:\nevictions_by_year = evictions_full.groupby(['year', 'school_name']).size().reset_index(name='eviction_count') #group by year and elementary school catchment, then count and make that a df\nI then added that information back into the main dataframe, so each eviction also had the information of how many evictions were in its school catchment that year.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#exploring-the-data",
    "href": "index.html#exploring-the-data",
    "title": "Exploring Evictions and Attendance in Philadelphia Schools",
    "section": "Exploring the Data",
    "text": "Exploring the Data\nI examined trends in attendance and eviction over time averaged across all schools. 95%+ attendance rates hovered around 40% before increasing after 2017. Eviction rates averaged around 100 before dropping steeply in 2020, the year when the city implemented a covid-19 eviction moratorium.\nI graphed attendance rates averaged by eviction count buckets (for example, average attendance rates in catchments with 0-49 evictions, 50-100, etc). At first I saw the expected trend (more evictions are associated with worse attendance), but catchments with 200-249 and 250-300 did not match the trend.\nI graphed attendance rates vs evictions for each year in the data (2016-2020) as well as attendance vs evictions in the prior year. I could see a negative correlation between attendance and eviction within each year, but no such correlation with prior year evictions.\nVisually inspecting plots of evictions vs 95% attendance rates, I could see that within each year, there appeared to be a loose negative correlation as expected: catchments with more evictions saw worse attendance. But across years, because the number of evictions in the catchments varied much more widely than attendance rates did, it was harder to see patterns.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#machine-learning-results",
    "href": "index.html#machine-learning-results",
    "title": "Exploring Evictions and Attendance in Philadelphia Schools",
    "section": "Machine Learning & Results",
    "text": "Machine Learning & Results\nI used scikit-learn to attempt to predict 95%+ attendance rates based on: year, eviction count, previous year eviction count, and previous year 95% attendance rates. I used a linear regression model.\nOn the training data, the model scored 0.856. On the test data, it scores 0.838.\nHowever, I wanted to know the impact of eviction data–after all, it could be that the accuracy of the model came only from prior year attendance data. Therefore, I reran the same steps but used only year and previous year 95% attendance rates, and no eviction information.\nThis new model scored 0.849 on the training data and 0.827 on the test data.\nTherefore, it seems that adding eviction information improved the model score by 0.01.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#opportunities-for-improvement",
    "href": "index.html#opportunities-for-improvement",
    "title": "Exploring Evictions and Attendance in Philadelphia Schools",
    "section": "Opportunities for Improvement",
    "text": "Opportunities for Improvement\nIdeas for improving the model and/or further research include: -coding evictions by what academic year they were part of, rather than calendar year -removing 2020 from the data and rerunning, in case the effects of covid harmed the model -normalizing evictions for population in each catchment instead of assuming they were comparable -examining individual outliers and contextualizing the data with information about what was happening in that school or neighborhood -creating interactive visualizations with tooltips allowing the user to see each school -creating geographic visualizations of the catchments",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "docs/Final Project AMarqusee.html",
    "href": "docs/Final Project AMarqusee.html",
    "title": "Data",
    "section": "",
    "text": "Eviction Data, School Catchment Polygons, and Attendance Data Download Landlord Tenant Cases in Philadeplhia Municipal Court from 2016 to Present: https://docs.philalegal.org/index.php/s/37j1xroW9NvX6x2 “Tenant-Addresses-Opa” is the one with geocoded addresses, dates, and docket numbers.\nolder: https://docs.philalegal.org/index.php/s/w9IQZrb8eDqXJkU\nSchool Catchments (Elementary Schools) https://hub.arcgis.com/datasets/phl::schooldist-catchments-es/about\nAttendance Data https://www.philasd.org/performance/programsservices/open-data/school-performance/#attendance",
    "crumbs": [
      "Evictions and Attendance Rates in Philadelphia School Catchments"
    ]
  },
  {
    "objectID": "docs/Final Project AMarqusee.html#change-the-format-of-the-school-names-in-the-catchment-to-firstname-lastname-school-to-match-their-format-in-the-attendance-data",
    "href": "docs/Final Project AMarqusee.html#change-the-format-of-the-school-names-in-the-catchment-to-firstname-lastname-school-to-match-their-format-in-the-attendance-data",
    "title": "Data",
    "section": "Change the format of the school names in the catchment to “FirstName LastName School” to match their format in the attendance data",
    "text": "Change the format of the school names in the catchment to “FirstName LastName School” to match their format in the attendance data\n\n#to make the name formatting match, take everything after the comma and put it at the front, then add ' School'\ncatchments['school_name'] = catchments['ES_NAME'].apply(\n    lambda x: ' '.join(x.split(', ')[::-1]).strip() + ' School' if isinstance(x, str) and ',' in str(x) else x\n)",
    "crumbs": [
      "Evictions and Attendance Rates in Philadelphia School Catchments"
    ]
  },
  {
    "objectID": "docs/Final Project AMarqusee.html#map-the-point-data-of-the-evictions-and-spatially-join-them-to-school-catchments",
    "href": "docs/Final Project AMarqusee.html#map-the-point-data-of-the-evictions-and-spatially-join-them-to-school-catchments",
    "title": "Data",
    "section": "Map the point data of the evictions and spatially join them to school catchments",
    "text": "Map the point data of the evictions and spatially join them to school catchments\n\n# Convert latitude and longitude to a geometry column (Point)\ngeometry = [Point(lon, lat) for lon, lat in zip(evictions_raw['longitude'], evictions_raw['latitude'])]\n\n# Create a GeoDataFrame\nevictions_gdf = gpd.GeoDataFrame(evictions_raw, geometry=geometry).set_crs(\"EPSG:4326\", inplace=True)\n\n\n#Spatial join evictions to school catchments\nevictions_in_catchments = gpd.sjoin(\n    evictions_gdf,\n    catchments,\n    predicate=\"within\",\n    how=\"left\",\n)\n#evictions_in_catchments.head() #uncomment to view the dataframe head\n\n\n\n\n\n\n\n\nid\nd_filing\nparcel_number\nlatitude\nlongitude\ngeometry\nindex_right\nOBJECTID\nES_ID\nES_NAME\n...\nGR_ID_09\nGR_ID_10\nGR_ID_11\nGR_ID_12\nES_GRADE\nMS_GRADE\nHS_GRADE\nShape__Area\nShape__Length\nschool_name\n\n\n\n\n0\nLT-02-10-23-2533\n2022-10-21 00:00:00\n61220300\n39.960056\n-75.205382\nPOINT (-75.20538 39.96006)\n43.0\n44.0\n1470\nLocke, Alain\n...\n1020\n1020\n1020\n1020\nK-8\nK-8\n9-12\n2.699519e+06\n8661.940577\nAlain Locke School\n\n\n1\nLT-16-01-04-3000\n2016-01-04 00:00:00\n871123700\n39.918318\n-75.171171\nPOINT (-75.17117 39.91832)\n9.0\n10.0\n2240\nBregy, F Amedee\n...\n2000\n2000\n2000\n2000\nK-8\nK-8\n9-12\n1.976860e+07\n20031.922528\nF Amedee Bregy School\n\n\n2\nLT-16-01-04-3001\n2016-01-04 00:00:00\n591143400\n40.053903\n-75.158813\nPOINT (-75.15881 40.0539)\n120.0\n121.0\n3426\nMastery Charter School at Pastorius\n...\n6060\n6060\n6060\n6060\nK-8\nK-8\n9-12\n2.060819e+06\n6615.488075\nMastery Charter School at Pastorius\n\n\n3\nLT-16-01-04-3002\n2016-01-04 00:00:00\n364306000\n39.933526\n-75.190118\nPOINT (-75.19012 39.93353)\n7.0\n8.0\n3424\nUniversal Institute Charter School at Alcorn\n...\n3417\n3417\n3417\n3417\nK-8\nK-8\n9-12\n6.872673e+06\n12326.330378\nUniversal Institute Charter School at Alcorn\n\n\n4\nLT-16-01-04-3003\n2016-01-04 00:00:00\n122200700\n40.042783\n-75.165596\nPOINT (-75.1656 40.04278)\n120.0\n121.0\n3426\nMastery Charter School at Pastorius\n...\n6060\n6060\n6060\n6060\nK-8\nK-8\n9-12\n2.060819e+06\n6615.488075\nMastery Charter School at Pastorius\n\n\n\n\n5 rows × 33 columns",
    "crumbs": [
      "Evictions and Attendance Rates in Philadelphia School Catchments"
    ]
  },
  {
    "objectID": "docs/Final Project AMarqusee.html#clean-up-on-attendance-data",
    "href": "docs/Final Project AMarqusee.html#clean-up-on-attendance-data",
    "title": "Data",
    "section": "Clean up on attendance data",
    "text": "Clean up on attendance data\n\n#assign each school year only one year in order to match it with a year from eviction data. I called it only the end year (ie more of the 2013-2014 academic year takes place in 2014 than 2013)\n#it would have been nice to extract the full dates from the eviction data and assign them to school years directly, but I ran out of time\n\nattendance_raw['year']=attendance_raw['School Year'].str[5:] \n\n#keep only rows where the attendance category is All Students \nattendance = attendance_raw[attendance_raw['Category'] == 'All Students']\n\n#Add a new column for the previous year's attendance\n#Sort by 'year' to make sure we have the data in the correct order\nattendance = attendance.sort_values(by='year')\n#add the new column\nattendance['previous_year_attendance'] = attendance.groupby('School Name')['% with 95%+ Attendance (Yearly)'].shift(1)\n\n#attendance.head() #uncomment to view the dataframe head\n\n\n\n\n\n\n\n\nSchool Year\nULCS Code\nSCN Code\nSchool Name\nSector\nCategory\nGroup\nTotal Students (Yearly)\n# with 95%+ Attendance (Yearly)\n% with 95%+ Attendance (Yearly)\nyear\nprevious_year_attendance\n\n\n\n\n0\n2013-2014\n1010\n101\nJohn Bartram High School\nDistrict\nAll Students\nAll Students\n1250\n164\n13.12\n2014\nNaN\n\n\n2054\n2013-2014\n6310\n631\nJohn F. McCloskey School\nDistrict\nAll Students\nAll Students\n476\n271\n56.93\n2014\nNaN\n\n\n2069\n2013-2014\n6320\n632\nThomas Mifflin School\nDistrict\nAll Students\nAll Students\n325\n114\n35.08\n2014\nNaN\n\n\n2086\n2013-2014\n6340\n634\nJoseph Pennell School\nDistrict\nAll Students\nAll Students\n459\n125\n27.23\n2014\nNaN\n\n\n2100\n2013-2014\n6350\n635\nSamuel Pennypacker School\nDistrict\nAll Students\nAll Students\n435\n180\n41.38\n2014\nNaN",
    "crumbs": [
      "Evictions and Attendance Rates in Philadelphia School Catchments"
    ]
  },
  {
    "objectID": "docs/Final Project AMarqusee.html#matching-school-names-with-fuzzy-matching",
    "href": "docs/Final Project AMarqusee.html#matching-school-names-with-fuzzy-matching",
    "title": "Data",
    "section": "Matching School Names with Fuzzy Matching",
    "text": "Matching School Names with Fuzzy Matching\nEven after reformatting the names in the catchment data to FirstName LastName, there are enough differences that fuzzy matching is needed–for example, to deal with differences between, eg, “Anthony M. Marqusee School” and “Anthony Marqusee School.”\nI used fuzzywuzzy to accomplish this.\n\n#viewing the lists of school names in the attendance data\n#attendance['School Name'].unique() #uncomment and run to see how the schools are named: FirstName LastName School, for ones named after people\n\narray(['John Bartram High School', 'West Philadelphia High School',\n       'High School of the Future',\n       'Paul Robeson High School for Human Services',\n       'William L. Sayre High School', 'William T. Tilden School',\n       'Motivation High School', 'John Barry School',\n       'William C. Bryant School', 'Joseph W. Catharine School',\n       'Benjamin B. Comegys School', 'Sadie Alexander School',\n       'Andrew Hamilton School', 'Avery D. Harrington School',\n       'Samuel B. Huey School', 'Henry C. Lea School',\n       'William C. Longstreth School', 'Morton McMichael School',\n       'S. Weir Mitchell School', 'Thomas G. Morton School',\n       'Samuel Powel School', 'John M. Patterson School',\n       'James Rhoads School', 'Martha Washington School',\n       'Penrose School', 'Add B. Anderson School', 'Alain Locke School',\n       'Rudolph Blankenburg School', 'Middle Years Alternative School',\n       'South Philadelphia High School', 'Benjamin Franklin High School',\n       'High School for Creative and Performing Arts School',\n       'Julia R. Masterman School', 'Furness High School',\n       'D. Newlin Fell School', 'Bache-Martin School',\n       'F. Amedee Bregy School', 'George W. Childs School',\n       'Franklin Learning Center', 'Stephen Girard School',\n       'General George A. McCall School', 'Delaplaine McDaniel School',\n       'William M. Meredith School', 'Robert Morris School',\n       'Girard Academic Music Program', 'Edwin M. Stanton School',\n       'Albert M. Greenfield School', 'Chester A. Arthur School',\n       'Laura W. Waring School', 'Andrew Jackson School',\n       'Abram S. Jenks School', 'Francis S. Key School',\n       'Eliza B. Kirkbride School', 'George W. Nebinger School',\n       'Academy at Palumbo', 'George W. Sharswood School',\n       'Southwark School', 'Science Leadership Academy',\n       'Constitution High School', 'John H. Taggart School',\n       'Vare-Washington School', 'Overbrook High School',\n       'High School of Engineering and Science',\n       'Murrell Dobbins Career and Technical High School',\n       'Dimner Beeber School', 'Strawberry Mansion High School',\n       'James G. Blaine School', 'Lewis C. Cassidy Academics Plus School',\n       'William Dick School', 'Samuel Gompers School',\n       'Edward Heston School', 'Robert E. Lamberton School',\n       'E. Washington Rhodes School', 'Overbrook School',\n       'Thomas M. Peirce School', 'Dr. Ethel Allen School',\n       'Tanner G. Duckrey School', 'Richard R. Wright School',\n       'Overbrook Educational Center', 'Edward Gideon School',\n       'William D. Kelley School', 'General George G. Meade School',\n       'Thomas A. Edison High School', 'Philadelphia Military Academy',\n       'Jules E. Mastbaum Area Vocational Technical High School',\n       'Parkway Northwest High School', 'Parkway Center City High School',\n       'Parkway West High School', 'William W. Bodine High School',\n       'Penn Treaty High School', 'Julia de Burgos School',\n       'Alexander Adaire School', 'Henry A. Brown School',\n       'Russell H. Conwell School', 'Paul L. Dunbar School',\n       'Lewis Elkin School', 'Horatio B. Hackett School',\n       'John F. Hartranft School', 'William H. Hunter School',\n       'James R. Ludlow School', 'William McKinley School',\n       'John Moffet School', 'Potter-Thomas School', 'Richmond School',\n       'Isaac A. Sheppard School', 'John Welsh School',\n       'Alternative Middle Years at James Martin',\n       'Frances E. Willard School', 'William Cramp School',\n       'General Philip Kearny School', 'Cayuga School',\n       'Thurgood Marshall School',\n       'Kensington International Business, Finance, and Entrepreneurship High School',\n       'Kensington High School for Creative and Performing Arts',\n       'Philip H. Sheridan School', 'Kensington Health Sciences Academy',\n       'Spring Garden School', 'John H. Webster School',\n       'Kensington Urban Education Academy',\n       'Honorable Luis Munoz-Marin School', 'Central High School',\n       'Roxborough High School', 'Walter B. Saul High School',\n       'Philadelphia High School for Girls',\n       'Martin Luther King High School',\n       'A. Philip Randolph Career and Technical High School',\n       'Morris E. Leeds School', 'Anna B. Day School',\n       'Franklin S. Edmonds School', 'Eleanor C. Emlen School',\n       'Fitler Academics Plus School', 'Charles W. Henry School',\n       'Henry H. Houston School', 'John S. Jenks School',\n       'James Logan School', 'John F. McCloskey School',\n       'Thomas Mifflin School', 'Joseph Pennell School',\n       'Samuel Pennypacker School', 'Theodore Roosevelt School',\n       'Shawmont School', 'Edward T. Steel School',\n       'Cook-Wissahickon School', 'John Wister School',\n       'Anna L. Lingelbach School', 'James Dobson School',\n       'Hill-Freedman School', 'John B. Kelly School',\n       'Academy for the Middle Years at Northwest',\n       'Lankenau High School', 'Frankford High School',\n       'Jay Cooke School', 'Warren G. Harding School',\n       'Samuel Fels High School', 'General Louis Wagner School',\n       'Juniata Park Academy', 'Clara Barton School',\n       'Laura H. Carnell School', 'Ellwood School',\n       'Thomas K. Finletter School', 'Benjamin Franklin School',\n       'Allen M. Stearne School', 'Francis Hopkinson School',\n       'Feltonville Intermediate School', 'Julia W. Howe School',\n       'Henry W. Lawton School', 'James R. Lowell School',\n       'John Marshall School', 'Grover Washington, Jr. School',\n       'Alexander K. McClure School', 'Andrew J. Morrison School',\n       'Olney School', 'James J. Sullivan School', 'Bayard Taylor School',\n       'William H. Ziegler School', 'Bridesburg School',\n       'Prince Hall School', 'Feltonville School of Arts and Sciences',\n       'Mary M. Bethune School', 'William Rowen School',\n       'Roberto Clemente School', 'Abraham Lincoln High School',\n       'Northeast High School', 'George Washington High School',\n       'Arts Academy at Benjamin Rush',\n       'Swenson Arts and Technology High School', 'Woodrow Wilson School',\n       'Austin Meehan School', 'Baldi School',\n       'John Hancock Demonstration School', 'Ethan Allen School',\n       'Joseph H. Brown School', 'Kennedy C. Crossan School',\n       'Hamilton Disston School', 'Edwin Forrest School',\n       'Fox Chase School', 'Thomas Holme School', 'Mayfair School',\n       'J. Hampton Moore School', 'General J. Harry LaBrum School',\n       'Solomon Solis-Cohen School', 'Gilbert Spruance School',\n       'Rhawnhurst School', 'Watson Comly School',\n       'Louis H. Farrell School', 'A.L. Fitzpatrick School',\n       'Anne Frank School', 'Robert B. Pollock School',\n       'Stephen Decatur School', 'Joseph Greenberg School',\n       'William H. Loesche School', 'The Workshop School',\n       'The Science Leadership Academy at Beeber', 'Building 21',\n       'The U School', 'The LINC',\n       'John Story Jenks Academy for Arts and Sciences',\n       'Hill-Freedman World Academy',\n       'Jenks Academy for Arts and Sciences',\n       'Science Leadership Academy Middle School',\n       'Kenderton Elementary School', 'Kensington High School',\n       'High School for Creative and Performing Arts',\n       'Overbrook Elementary School',\n       'Parkway Center City Middle College High School',\n       'Vaux High School: A Big Picture'], dtype=object)\n\n\n\n#viewing the list of school names in the catchment/eviction data\n#evictions_in_catchments['ES_NAME'].unique() #uncomment and run to see how the school names are formatted: LastName, FirstName of school namesake, for ones named after people\n\narray(['Locke, Alain', 'Bregy, F Amedee',\n       'Mastery Charter School at Pastorius',\n       'Universal Institute Charter School at Alcorn', 'Willard, Frances',\n       'Peirce, Thomas M', 'Hamilton, Andrew', 'Juniata Park Academy',\n       'Logan, James', 'Mastery Charter School at Clymer',\n       'Day, Anna Blakiston', 'Carnell, Laura H', 'Morton, Thomas G',\n       'Rhoads, James', 'Mastery Charter School at Harrity',\n       'Longstreth, William', 'Cassidy, Lewis C', 'Lamberton, Robert E',\n       'Loesche, William H', 'Mastery Charter School at Mann',\n       'Rhodes, E Washington', 'McDaniel, Delaplaine', 'Prince Hall',\n       'Bryant, William Cullen', 'Edmonds, Franklin S',\n       'Overbrook Elementary', 'Elkin, Lewis', 'Roosevelt, Theodore',\n       'Penn Alexander', 'Kearny, General Philip', 'Moore, J Hampton',\n       'Sullivan, James J', 'Henry, Charles W', 'Meade, General George G',\n       'Universal Institute Charter School at Daroff',\n       'Northeast Community Propel Academy', 'Washington, Martha',\n       'McMichael, Morton', 'Blankenburg, Rudolph', 'Forrest, Edwin',\n       'Wright, Richard', 'Comegys, Benjamin B', 'Allen, Ethan',\n       'Kelly, John B', 'Mastery Charter School at Wister',\n       'Barry, Commodore John', 'Harrington, Avery', 'McKinley, William',\n       'Hartranft, John F', 'Duckrey, Tanner', 'Frank, Anne',\n       'Waring, Laura W', 'Emlen, Eleanor C', 'Marshall, John',\n       'Mastery Charter School at Frederick Douglass', 'Webster, John H',\n       'Greenfield, Albert M', 'Morris, Robert', 'Girard, Stephen',\n       'Fitzpatrick, Aloysius L', 'Richmond', 'Mitchell, Weir', 'Cayuga',\n       'Lawton, Henry W', 'Disston, Hamilton', 'Pollock, Robert B',\n       'Finletter, Thomas K', 'Blaine, James G', 'Farrell, Louis H',\n       'Stanton, Edwin M', 'Hackett, Horatio B', 'Lingelbach, Anna L',\n       'Franklin, Benjamin ES', 'Vare-Washington ES',\n       'Universal Institute Charter School at Bluford', 'Penrose',\n       'Holme, Thomas', 'Gompers, Samuel', 'Decatur, Stephen',\n       'Powel, Samuel', 'Pennell, Joseph', 'Bethune, Mary Mc Leod',\n       'Shawmont', 'Phila Charter for Arts at HR Edmunds', 'Cooke, Jay',\n       'Spruance, Gilbert', 'Mastery Charter School at Smedley',\n       'Sheridan, Philip H', 'Bache / Martin', 'Dick, William',\n       'Rowen, William', 'Dunbar, Paul Laurence',\n       'Global Leadership Academy Charter School at Huey',\n       'Childs, George W', 'Ludlow, James R', 'Taggart, John H',\n       'Jenks, John S', 'Mastery Charter School at Cleveland',\n       'Brown, Joseph H', 'Heston, Edward', 'Dobson, James',\n       'Solis-Cohen, Solomon', 'Kelley, William D', 'Olney Elementary',\n       'Mifflin, Thomas', 'Sheppard, Isaac', 'Howe, Julia Ward',\n       'Rhawnhurst', 'Ellwood', 'Anderson, Add B', 'Marshall, Thurgood',\n       'Lowell, James R', 'Ziegler, William H',\n       'McCall, General George A', 'Steel, Edward',\n       'Belmont Elementary Charter School', 'Patterson, John M',\n       'Barton, Clara', 'Universal Institute Charter School at Creighton',\n       'Cramp, William', 'McClure, Alexander K', 'Stearne, Allen M',\n       'Bridesburg', 'Hopkinson, Francis', 'Greenberg, Joseph',\n       'Sharswood, George', 'Houston, Henry E', 'Lea, Henry C',\n       'Morrison, Andrew J', 'Mayfair', 'Cook-Wissahickon',\n       'Brown, Henry A', 'Pennypacker, Samuel', 'Welsh, John',\n       'Kenderton', 'Allen, Ethel D', 'Comly, Watson',\n       'Hunter, William H', 'Fanny Jackson Coppin', 'Catharine, Joseph',\n       'American Paradigm Charter School at Birney', 'Southwark',\n       'Spring Garden', 'Meredith, William M', 'Crossan, Kennedy C',\n       'Hancock-LaBrum', 'Moffet, John', 'Gideon, Edward',\n       'Kirkbride, Elizabeth B', 'Arthur, Chester A',\n       'Key, Francis Scott', 'Fell, D Newlin', 'Taylor, Bayard',\n       'Jenks, Abram', 'McCloskey, John F', 'Potter-Thomas',\n       'deBurgos, Julia', 'Adaire, Alexander', 'Fox Chase',\n       'Munoz-Marin, Luis', 'Nebinger, George W', nan], dtype=object)\n\n\n\n# Extract unique school names from both dataframes\nunique_schools_evictions = evictions_in_catchments['school_name'].unique()\nunique_schools_attendance = attendance['School Name'].unique()\n\n\n# Ensure that all input values are strings\ndef fuzzy_match(row, choices, scorer=fuzz.ratio, threshold=80):\n    # Convert the input 'row' to string to avoid the TypeError\n    row = str(row)\n    \n    # Extract the match and score\n    match, score = process.extractOne(row, choices, scorer=scorer)\n    \n    # Return the match only if it meets the threshold\n    return match if score &gt;= threshold else None\n\n\nevictions_matches= pd.DataFrame(unique_schools_evictions, columns=['school_name'])\n\n# Apply fuzzy matching on each unique name from evictions to unique names from attendance\nevictions_matches['matched_name'] = evictions_matches['school_name'].apply(\n    fuzzy_match, choices=unique_schools_attendance\n)\n\n# Merge the matched names back with the original evictions_in_catchments DataFrame\nevictions_in_catchments = evictions_in_catchments.merge(\n    evictions_matches, on='school_name', how='left'\n)",
    "crumbs": [
      "Evictions and Attendance Rates in Philadelphia School Catchments"
    ]
  },
  {
    "objectID": "docs/Final Project AMarqusee.html#what-about-prior-year-evictions",
    "href": "docs/Final Project AMarqusee.html#what-about-prior-year-evictions",
    "title": "Data",
    "section": "What about Prior Year Evictions?",
    "text": "What about Prior Year Evictions?\nI was curious if evictions from the year previous would correlate more or less with poor attendance; these graphs showed a lower correlation than looking at evictions in the same year.\n\n# sort the dataset by year\nevictions_grouped_for_plotting = evictions_grouped_for_plotting.sort_values(by=['school_name', 'year'])\n\n# Create a new column for the previous year's eviction count\nevictions_grouped_for_plotting['previous_year_eviction_count'] = evictions_grouped_for_plotting.groupby('school_name')['eviction_count'].shift(1)\n\n# Drop rows where there is no previous year's eviction data (i.e., the first year for each school)\nevictions_grouped_for_plotting_prev = evictions_grouped_for_plotting.dropna(subset=['previous_year_eviction_count'])\n\n# Iterate through each year to create a plot for that year\nfor year in evictions_grouped_for_plotting_prev['year'].unique():\n    # Filter the data for the current year\n    data_for_year = evictions_grouped_for_plotting_prev[evictions_grouped_for_plotting_prev['year'] == year]\n    \n    # Create a figure and axis\n    fig5, ax5 = plt.subplots(figsize=(12, 6))\n\n    # Plot the attendance rate against the previous year's eviction count\n    sns.lineplot(data=data_for_year, x='previous_year_eviction_count', y='% with 95%+ Attendance (Yearly)', \n                 hue='school_name', marker='o', ax=ax5, legend=None, color='b')\n\n    # Set labels and title for the first axis (Evictions)\n    ax5.set_xlabel('Previous Year Eviction Count')\n    ax5.set_ylabel('95%+ Attendance Rate', size=14)\n\n    # Set the title for the year\n    ax5.set_title(f\"Attendance vs Previous Year Evictions for {year}\")\n\n    # Rotate x-axis labels for better readability\n    plt.xticks(rotation=45)\n    \n    # Manually set the y-ticks\n    y_ticks5 = np.arange(0, 101, 10)  # Set the ticks from 0 to 100 with a step of 10\n    plt.yticks(y_ticks5, fontsize=12)\n\n    # Adjust the layout to avoid clipping\n    plt.tight_layout()\n\n    # Show the plot for the current year\n    plt.show()",
    "crumbs": [
      "Evictions and Attendance Rates in Philadelphia School Catchments"
    ]
  },
  {
    "objectID": "docs/Final Project AMarqusee.html#fit-and-score-the-model",
    "href": "docs/Final Project AMarqusee.html#fit-and-score-the-model",
    "title": "Data",
    "section": "Fit and score the model",
    "text": "Fit and score the model\nResult: on the training data, the model scores 0.856. On the test data, it scores 0.838.\n\nmodel.fit(X_train_scaled, y_train)\nmodel.score(X_train_scaled, y_train)\n\n0.8563331029398836\n\n\n\ny_pred = model.predict(X_test_scaled)\nmodel.score(X_test_scaled, y_test)\n\n0.8375502733651176",
    "crumbs": [
      "Evictions and Attendance Rates in Philadelphia School Catchments"
    ]
  },
  {
    "objectID": "docs/README-Copy1.html",
    "href": "docs/README-Copy1.html",
    "title": "README for Anthony Marqusee Final Project, MUSA 550",
    "section": "",
    "text": "README for Anthony Marqusee Final Project, MUSA 550\nRepository url for quarto website: https://amarqusee.github.io/evictions_and_attendance/"
  }
]